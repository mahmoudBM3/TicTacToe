#include<iostream>
using namespace std;
#include <time.h>
#include <bits/stdc++.h>
#include <chrono>
auto start = chrono::high_resolution_clock::now();
auto End = chrono::high_resolution_clock::now();
double time_taken = 0;
auto istart = chrono::high_resolution_clock::now();
auto iEnd = chrono::high_resolution_clock::now();
double inp_time = 0;


#define     SIDE 3          // Length of the board
#define     COMPUTER        1
#define     HUMAN           2
#define     COMPUTERMOVE   'O'
#define     HUMANMOVE      'X'
#define     SINGLE          1
#define     MULTI           2
#define     EASY            1
#define     HARD            2

char square[10] = { 'o', '1','2','3','4','5','6','7','8','9' };
char board1[3][3] = { {'1','2','3'},
                     {'4','5','6'},
                     {'7','8','9'}
};

int checkwin();
void board();
int iturn = 1;
bool draw = false;
int moveIndex1 = 0;

void showInstructions()
{
    cout << "\nChoose a cell numbered from 1 to 9 as below and play\n\n";

    cout << "\t\t\t 1 | 2 | 3 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 4 | 5 | 6 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 7 | 8 | 9 \n\n";
}

void showBoard(char board[][SIDE])
{

    cout << "\t\t\t" << board[0][0] << "  |  " << board[0][1] << "  |  " << board[0][2] << "\n";
    cout << "\t\t\t" << "-------------" << "\n";
    cout << "\t\t\t" << board[1][0] << "  |  " << board[1][1] << "  |  " << board[1][2] << "\n";
    cout << "\t\t\t" << "-------------" << "\n";
    cout << "\t\t\t" << board[2][0] << "  |  " << board[2][1] << "  |  " << board[2][2] << "\n\n\n";
}


bool rowCrossed(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[i][0] == board[i][1] &&
            board[i][1] == board[i][2] &&
            board[i][0] != ' ')
            return (true);
    }
    return(false);
}

// A function that returns true if any of the column
// is crossed with the same player's move
bool columnCrossed(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[0][i] == board[1][i] &&
            board[1][i] == board[2][i] &&
            board[0][i] != ' ')
            return (true);
    }
    return(false);
}

// A function that returns true if any of the diagonal
// is crossed with the same player's move
bool diagonalCrossed(char board[][SIDE])
{
    if (board[0][0] == board[1][1] &&
        board[1][1] == board[2][2] &&
        board[0][0] != ' ')
        return(true);

    if (board[0][2] == board[1][1] &&
        board[1][1] == board[2][0] &&
        board[0][2] != ' ')
        return(true);

    return(false);
}
bool gameOver(char board[][SIDE])
{
    return(rowCrossed(board) || columnCrossed(board) || diagonalCrossed(board));
}

// A function to declare the winner of the game
void declareWinner(int whoseTurn)
{
    if (whoseTurn == COMPUTER)
        cout << "COMPUTER has won\n";
    else
        cout << "HUMAN has won\n";
}


int minimax(char board[][SIDE], int depth, bool isAI)
{
    int score = 0;
    int bestScore = 0;
    if (gameOver(board) == true)
    {
        if (isAI == true)
            return -1;
        if (isAI == false)
            return +1;
    }
    else
    {
        if (depth < 9)
        {
            if (isAI == true)
            {
                bestScore = -999;
                for (int i = 0; i < SIDE; i++)
                {
                    for (int j = 0; j < SIDE; j++)
                    {
                        if (board[i][j] == ' ')
                        {
                            board[i][j] = COMPUTERMOVE;
                            score = minimax(board, depth + 1, false);
                            board[i][j] = ' ';
                            if (score > bestScore)
                            {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
            else
            {
                bestScore = 999;
                for (int i = 0; i < SIDE; i++)
                {
                    for (int j = 0; j < SIDE; j++)
                    {
                        if (board[i][j] == ' ')
                        {
                            board[i][j] = HUMANMOVE;
                            score = minimax(board, depth + 1, true);
                            board[i][j] = ' ';
                            if (score < bestScore)
                            {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
        }
        else
        {
            return 0;
        }
    }
}

// Function to calculate best move
int bestMove(char board[][SIDE], int moveIndex)
{
    int x = -1, y = -1;
    int score = 0, bestScore = -999;
    for (int i = 0; i < SIDE; i++)
    {
        for (int j = 0; j < SIDE; j++)
        {
            if (board[i][j] == ' ')
            {
                board[i][j] = COMPUTERMOVE;
                score = minimax(board, moveIndex + 1, false);
                board[i][j] = ' ';
                if (score > bestScore)
                {
                    bestScore = score;
                    x = i;
                    y = j;
                }
            }
        }
    }
    return x * 3 + y;
}

void playTicTacToe(int whoseTurn)
{

    int moveIndex = 0, x = 0, y = 0;
    showInstructions();
    // Keep playing till the game is over or it is a draw
    while (gameOver(board1) == false && moveIndex != SIDE * SIDE)
    {
        int n;
        if (whoseTurn == COMPUTER)
        {
            n = bestMove(board1, moveIndex);
            x = n / SIDE;
            y = n % SIDE;
            board1[x][y] = COMPUTERMOVE;
            cout << "COMPUTER has put a " << COMPUTERMOVE << " in cell " << n + 1 << "\n\n";
            system("cls");
            showBoard(board1);
            moveIndex++;
            whoseTurn = HUMAN;
        }

        else if (whoseTurn == HUMAN)
        {
            cout << "You can insert in the following positions : ";
            for (int i = 0; i < SIDE; i++)
                for (int j = 0; j < SIDE; j++)
                    if (board1[i][j] == ' ')
                        cout << (i * 3 + j) + 1;
            cout << "\n\nEnter the position = ";
            istart = chrono::high_resolution_clock::now();
            cin >> n;
            iEnd = chrono::high_resolution_clock::now();
            inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
            n--;
            x = n / SIDE;
            y = n % SIDE;
            if (board1[x][y] == ' ' && n < 9 && n >= 0)
            {
                board1[x][y] = HUMANMOVE;
                cout << "\nHUMAN has put a " << HUMANMOVE << " in cell " << n + 1 << "\n\n";
                system("cls");
                showBoard(board1);
                moveIndex++;
                whoseTurn = COMPUTER;
            }
            else if (board1[x][y] != ' ' && n < 9 && n >= 0)
            {
                cout << "\nPosition is occupied, select any one place from the available places\n\n";
            }
            else if (n < 0 || n>8)
            {
                cout << "Invalid position\n";
            }
        }
    }
    // If the game has drawn
    if (gameOver(board1) == false && moveIndex == SIDE * SIDE)
        cout << "It's a draw\n";
    else
    {
        // Toggling the user to declare the actual winner
        if (whoseTurn == COMPUTER)
            whoseTurn = HUMAN;
        else if (whoseTurn == HUMAN)
            whoseTurn = COMPUTER;

        declareWinner(whoseTurn);
    }
}

void playTicTacToeEasy()
{
    int choice;
    if (iturn == 1)
    {
        moveIndex1++;
    state1:
        cout << endl << "It's your turn, Select a number: ";
        istart = chrono::high_resolution_clock::now();
        cin >> choice;
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
        cout << endl;
        if (choice <= 9 && choice > 0)
        {
            if (choice >= 1 && choice <= 3)
            {
                if (board1[0][choice - 1] != 'X' && board1[0][choice - 1] != 'O')
                    board1[0][choice - 1] = 'X';
                else
                {
                    cout << "It's already occupied please select another number: ";
                    goto state1;
                }
            }
            else if (choice >= 4 && choice <= 6)
            {
                if (board1[1][choice - 4] != 'X' && board1[1][choice - 4] != 'O')
                    board1[1][choice - 4] = 'X';
                else
                {
                    cout << "It's already occupied please select another number: ";
                    goto state1;
                }
            }
            else if (choice >= 7 && choice <= 9)
            {
                if (board1[2][choice - 7] != 'X' && board1[2][choice - 7] != 'O')
                    board1[2][choice - 7] = 'X';
                else
                {
                    cout << "It's already occupied please select another number: ";
                    goto state1;
                }
            }

        }
        else
        {
            cout << " Wrong number";
            goto state1;
        }
        iturn = 2;
    }
    else if (iturn == 2)
    {
        moveIndex1++;
        if (gameOver(board1) == false && moveIndex1 >= SIDE * SIDE)
        {
            draw = true;
            goto End;
        }

    state2:
       // srand(time(0));
        int choice = 1 + (rand() % 9);
        if (choice >= 1 && choice <= 3)
        {
            if (board1[0][choice - 1] != 'X' && board1[0][choice - 1] != 'O')
                board1[0][choice - 1] = 'O';
            else
                goto state2;
        }
        else if (choice >= 4 && choice <= 6)
        {
            if (board1[1][choice - 4] != 'X' && board1[1][choice - 4] != 'O')
                board1[1][choice - 4] = 'O';
            else
                goto state2;
        }
        else if (choice >= 7 && choice <= 9)
        {
            if (board1[2][choice - 7] != 'X' && board1[2][choice - 7] != 'O')
                board1[2][choice - 7] = 'O';
            else
                goto state2;
        }
        iturn = 1;
    }
    system("cls");
    showBoard(board1);
End:
    {

    }
}

int checkwin()
{
    if (square[1] == square[2] && square[2] == square[3])

        return 1;
    else if (square[4] == square[5] && square[5] == square[6])

        return 1;
    else if (square[7] == square[8] && square[8] == square[9])

        return 1;
    else if (square[1] == square[4] && square[4] == square[7])

        return 1;
    else if (square[2] == square[5] && square[5] == square[8])

        return 1;
    else if (square[3] == square[6] && square[6] == square[9])

        return 1;
    else if (square[1] == square[5] && square[5] == square[9])

        return 1;
    else if (square[3] == square[5] && square[5] == square[7])

        return 1;
    else if (square[1] != '1' && square[2] != '2' && square[3] != '3'
        && square[4] != '4' && square[5] != '5' && square[6] != '6'
        && square[7] != '7' && square[8] != '8' && square[9] != '9')

        return 0;
    else
        return -1;
}


void board()
{
    system("cls");
    cout << "\n\n\t\t\t   Tic Tac Toe\n\n";

    cout << "\t\t" << "  Player 1 (X)  -  Player 2 (O)" << endl << endl;
    cout << endl;

    cout << "\t\t\t" << "     |     |     " << endl;
    cout << "\t\t\t" << "  " << square[1] << "  |  " << square[2] << "  |  " << square[3] << endl;

    cout << "\t\t\t" << "_____|_____|_____" << endl;
    cout << "\t\t\t" << "     |     |     " << endl;

    cout << "\t\t\t" << "  " << square[4] << "  |  " << square[5] << "  |  " << square[6] << endl;

    cout << "\t\t\t" << "_____|_____|_____" << endl;
    cout << "\t\t\t" << "     |     |     " << endl;

    cout << "\t\t\t" << "  " << square[7] << "  |  " << square[8] << "  |  " << square[9] << endl;

    cout << "\t\t\t" << "     |     |     " << endl << endl;
}


int main()
{
    start = chrono::high_resolution_clock::now();
    float selectedmode, type;
    cout << "Hello! Welcome to TicTacToe Game! \n";
statezero:
    cout << "Select 1 for Single Or 2 for Multi-Player: ";
    istart = chrono::high_resolution_clock::now();
    cin >> selectedmode;
    if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto statezero;
    }
    else
    {
        if (selectedmode < 0)
        {
            cout << "please enter a positive number " << endl;
            goto statezero;
        }
        if (ceil(selectedmode) != selectedmode)
        {
            cout << "please enter a whole number " << endl;
            goto statezero;
        }
    }
    iEnd = chrono::high_resolution_clock::now();
    inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
    if (selectedmode == MULTI)
    {
        int player = 1, i, choice;
        char mark;
        do
        {
            board();
            player = (player % 2) ? 1 : 2;
            cout << "Player " << player << ", enter a number:  ";
           istart = chrono::high_resolution_clock::now();
            cin >> choice;
            iEnd = chrono::high_resolution_clock::now();
            inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
            mark = (player == 1) ? 'X' : 'O';
            if (choice == 1 && square[1] == '1')
                square[1] = mark;
            else if (choice == 2 && square[2] == '2')
                square[2] = mark;
            else if (choice == 3 && square[3] == '3')
                square[3] = mark;
            else if (choice == 4 && square[4] == '4')
                square[4] = mark;
            else if (choice == 5 && square[5] == '5')
                square[5] = mark;
            else if (choice == 6 && square[6] == '6')
                square[6] = mark;
            else if (choice == 7 && square[7] == '7')
                square[7] = mark;
            else if (choice == 8 && square[8] == '8')
                square[8] = mark;
            else if (choice == 9 && square[9] == '9')
                square[9] = mark;
            else
            {
                cout << "Invalid move ";
                player--;
                istart = chrono::high_resolution_clock::now();
                cin.ignore();
                cin.get();
               iEnd = chrono::high_resolution_clock::now();
               inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
            }
            i = checkwin();

            player++;
        } while (i == -1);
        board();
        if (i == 1)
            cout << "==>\aPlayer " << --player << " won ";
        else
            cout << "==>\aGame Draw";
        istart = chrono::high_resolution_clock::now();
        cin.ignore();
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
    }
    else if (selectedmode == SINGLE)
    { rein:
        cout << "Select The Level Of Difficulty 1 for Easy or 2 for Hard: ";
   istart = chrono::high_resolution_clock::now();
    cin >> type;
    if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto rein;
    }
    else
    {
        if (type < 0)
        {
            cout << "please enter a positive number " << endl;
            goto rein;
        }
        if (ceil(type) != type)
        {
            cout << "please enter a whole number " << endl;
            goto rein;
        }
    }
    iEnd = chrono::high_resolution_clock::now();
    inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
        if (type == EASY)
        {
            showInstructions();
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    board1[i][j] = ' ';
            while ((gameOver(board1) == false) && (draw == false))
            {
                playTicTacToeEasy();
            }

            if ((iturn == 1) && (draw == false))
            {
                cout << "\n" << "Computer won, Good Luck Next Time!";
            }
            else if ((iturn == 2) && (draw == false))
            {
                cout << "\n" << "Congratulations! You won!";
            }
            else
                cout << "GAME DRAW";
        }
        else if (type == HARD)
        {
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    board1[i][j] = ' ';

            char cont = 'y';
            do {
                char choice;
                cout << "Do you want to start first?(y/n) : ";
                istart = chrono::high_resolution_clock::now();
                cin >> choice;

                iEnd = chrono::high_resolution_clock::now();
                inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
                if (choice == 'n')
                    playTicTacToe(COMPUTER);
                else if (choice == 'y')
                    playTicTacToe(HUMAN);
                else
                    cout << "Invalid choice\n";

                cout << "\nDo you want to quit(y/n) : ";
                istart = chrono::high_resolution_clock::now();
                cin >> cont;
                iEnd = chrono::high_resolution_clock::now();
                inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
                if (cont == 'n')
                    for (int i = 0; i < 3; i++)
                        for (int j = 0; j < 3; j++)
                            board1[i][j] = ' ';
            } while (cont == 'n');
        }
    }
    else
    {
        cout << "Select 1 Or 2 Please " << "\n";
        goto statezero;
    }
    End = chrono::high_resolution_clock::now();
    time_taken = chrono::duration_cast<chrono::nanoseconds>(End - start).count();
    time_taken = time_taken - inp_time;
    time_taken *= 1e-9;
    cout << "\nTime taken by program is : " << fixed << time_taken << setprecision(9);
    cout << " sec" << endl;
    return 0;
}

