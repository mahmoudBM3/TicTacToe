#include<iostream>
#include<stack>
#include<time.h>
using namespace std;
#include <bits/stdc++.h>
#include <chrono>
auto start = chrono::high_resolution_clock::now();
auto End = chrono::high_resolution_clock::now();
double time_taken = 0;
auto istart = chrono::high_resolution_clock::now();
auto iEnd = chrono::high_resolution_clock::now();
double inp_time = 0;

#define     SIDE            4 // Length of the board
#define     COMPUTER        1
#define     HUMAN           2
#define     COMPUTERMOVE   'O'
#define     HUMANMOVE      'X'
#define     SINGLE          1
#define     MULTI           2
#define     EASY            1
#define     HARD            2

int iturn = 1;
bool draw = false;
bool gameover();

class node
{
private:
public:
    char data;
    node* next;
    node(char number) { next = NULL; data = number; }
};
class alist
{
private:
public:
    node* head;

    alist() { head = NULL; };
    void pushatfront(char data);
    void multiplayer();
    void singleplayer_easy();
    void display_board();
    void push1();
    void push2();
}list1, list2;

void alist::pushatfront(char data)
{
    node* new_node = new node(data);
    new_node->next = head;
    head = new_node;
}

void alist::singleplayer_easy()
{
    float choice;
    if (iturn == 1)
    {
    state1:
        node* ptr;
        ptr = list1.head;
        cout << endl << "It's your turn, Select a number: ";
        istart = chrono::high_resolution_clock::now();
        statezero:
        cin >> choice;
                if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto statezero;
    }
    else
    {
        if (choice < 0)
        {
            cout << "please enter a positive number " << endl;
            goto statezero;
        }
        if (ceil(choice) != choice)
        {
            cout << "please enter a whole number " << endl;
            goto statezero;
        }
    }
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();

        cout << endl;
        if (choice <= (SIDE * SIDE) && choice > 0)
        {

            for (int i = 1; i < choice; i++)
                ptr = ptr->next;
            if (ptr->data != 'x' && ptr->data != 'o')
                ptr->data = 'x';
            else
            {
                cout << "It's already occupied please select another number: ";
                goto state1;
            }
        }
        else
        {
            cout << " Wrong number";
            goto state1;
        }
        iturn = 2;
    }
    else if (iturn == 2)
    {
    state2:
        node* ptr;
        ptr = list1.head;
        srand(time(0));
        choice = 1 + (rand() % (SIDE * SIDE));

        if (choice <= (SIDE * SIDE) && choice > 0)
        {
            for (int i = 1; i < choice; i++)
                ptr = ptr->next;
            if (ptr->data != 'x' && ptr->data != 'o')
                ptr->data = 'o';
            else
            {
                goto state2;
            }
        }
        iturn = 1;
    }
    display_board();
}

void alist::multiplayer()
{
    float choice;
    if (iturn == 1)
    {
    state1:
        node* ptr;
        ptr = list1.head;
        cout << endl << "It's player 1 turn select a number: ";
        istart = chrono::high_resolution_clock::now();
        statezero:
        cin >> choice;
        if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto statezero;
    }
    else
    {
        if (choice < 0)
        {
            cout << "please enter a positive number " << endl;
            goto statezero;
        }
        if (ceil(choice) != choice)
        {
            cout << "please enter a whole number " << endl;
            goto statezero;
        }
    }
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
        cout << endl;
        if (choice <= (SIDE * SIDE) && choice > 0)
        {

            for (int i = 1; i < choice; i++)
                ptr = ptr->next;
            if (ptr->data != 'x' && ptr->data != 'o')
                ptr->data = 'x';
            else
            {
                cout << "It's already occupied please select another number: " << endl;
                goto state1;
            }
        }
        else
        {
            cout << "Wrong number ";
            goto state1;
        }
        iturn = 2;
    }
    else if (iturn == 2)
    {
    state2:
        node* ptr;
        ptr = list1.head;
        cout << endl << "Its' player 2 turn select a number: ";
        istart = chrono::high_resolution_clock::now();
        statezer:
        cin >> choice;
        if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto statezer;
    }
    else
    {
        if (choice < 0)
        {
            cout << "please enter a positive number " << endl;
            goto statezer;
        }
        if (ceil(choice) != choice)
        {
            cout << "please enter a whole number " << endl;
            goto statezer;
        }
    }
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
        if (choice <= (SIDE * SIDE) && choice > 0)
        {
            for (int i = 1; i < choice; i++)
                ptr = ptr->next;
            if (ptr->data != 'x' && ptr->data != 'o')
                ptr->data = 'o';
            else
            {
                cout << "It's already occupied please select another number: ";
                goto state2;
            }
        }
        else
        {
            cout << "Wrong number ";
            goto state2;
        }
        iturn = 1;
    }
    display_board();
}

void alist::display_board()
{system("cls");
    node* ptr2 = list1.head;
    int count = 1;
    int steps = 1;
    for (int i = 0; i <= SIDE * 8; i++)
    {
        cout << "-";
    }
    cout << endl;
    for (int i = 0; i < SIDE + 1; i++)
    {
        cout << "|" << "       ";
    }
    cout << endl;
    while (ptr2 != NULL)
    {
    if (ptr2->data>='A'&&ptr2->data!='x'&&ptr2->data!='o' )
        cout << "|" << "   " <<10+ int(ptr2->data -'A')<< "  ";
        else cout << "|" << "   " <<ptr2->data << "   ";
        ptr2 = ptr2->next;

        if (count == SIDE * steps)
        {
            cout << "|" << endl;
            for (int i = 0; i < SIDE + 1; i++)
            {
                cout << "|" << "       ";
            }
            cout << endl;
            for (int i = 0; i <= SIDE * 8; i++)
            {
                cout << "-";
            }
            cout << endl;
            if (steps == SIDE)
            {
                break;
            }
            else
            {
                for (int i = 0; i < SIDE + 1; i++)
                {
                    cout << "|" << "       ";
                }
                cout << endl;
            }

            steps++;
        }
        count++;

    }
}

void alist::push1()
{
    char a;
    for (int i = (SIDE * SIDE) + 7; i > 0; i--)
    {
        a = i + 48;
        if (a > 57 && a < 65)
        {
            continue;
        }
        else
        {
            list1.pushatfront(a);
        }
    }
}

void alist::push2()
{
    for (int i = 0; i < SIDE * SIDE; i++)
    {
        pushatfront(' ');
    }
}

bool gameover()//to check the cases of wining in easy mode in single player and multiplayer
{
    node* ptr = list1.head;
    int comp1 = 0;
    int comp2 = 0;
    int comp3 = 0;
    int comp4 = 0;
    //rows
    for (int j = 1; j <= SIDE; j++)
    {
        for (int i = 1; i < SIDE; i++)
        {
            if (ptr->data == ptr->next->data)
            {
                comp1++;
                ptr = ptr->next;
                if (comp1 == SIDE - 1)
                {
                    return false;
                }
            }
            else
            {
                comp1 = 0;
                break;
            }

        }
        ptr = list1.head;
        for (int i = 0; i < SIDE * j; i++)
        {
            ptr = ptr->next;
        }
    }
    ptr = list1.head;
    //columns
    for (int j = 1; j <= SIDE; j++)
    {
        ptr = list1.head;
        for (int t = 1; t < j; t++)
        {
            ptr = ptr->next;
        }
        char ch = ptr->data;
        for (int i = 0; i < SIDE; i++)
        {
            ptr = ptr->next;
        }
        for (int k = 1; k < SIDE; k++)
        {
            if (ch == ptr->data)
            {
                comp2++;
                if (comp2 == SIDE - 1)
                {
                    return false;
                }
                ch = ptr->data;
                for (int i = 0; i < SIDE; i++)
                {
                    ptr = ptr->next;
                }
            }
            else
            {
                comp2 = 0;
                break;
            }
        }
    }
    ptr = list1.head;

    for (int j = 1; j < SIDE; j++)
    {
        char ch = ptr->data;
        for (int i = 0; i <= SIDE; i++)
        {
            ptr = ptr->next;
        }
        if (ch == ptr->data)
        {
            comp3++;
            if (comp3 == SIDE - 1)
            {
                return false;
            }
        }
        else
        {
            comp3 = 0;
            break;
        }
    }
    ptr = list1.head;

    for (int i = 1; i < SIDE; i++)
    {
        ptr = ptr->next;
    }
    for (int j = 1; j < SIDE; j++)
    {
        char ch = ptr->data;

        for (int i = 1; i < SIDE; i++)
        {
            ptr = ptr->next;
        }
        if (ch == ptr->data)
        {
            comp4++;
            if (comp4 == SIDE - 1)
            {
                return false;
            }
        }
        else
        {
            comp4 = 0;
            break;
        }
    }
    ptr = list1.head;

    for (int i = 0; i < SIDE * SIDE; i++)
    {

        if (ptr->data != 'x' && ptr->data != 'o')
        {
            return true;
        }
        ptr = ptr->next;
    }

    draw = true;
    return false;
}

//used in hard mode in single player/
void showInstructions()
{
    cout << "\nChoose a cell numbered from 1 to 9 as below and play\n\n";

    cout << "\t\t\t 1 | 2 | 3 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 4 | 5 | 6 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 7 | 8 | 9 \n\n";
}

void showBoard(char board[][SIDE])
{system("cls");

    cout << "\t\t\t" << board[0][0] << "  |  " << board[0][1] << "  |  " << board[0][2] << "\n";
    cout << "\t\t\t" << "-------------" << "\n";
    cout << "\t\t\t" << board[1][0] << "  |  " << board[1][1] << "  |  " << board[1][2] << "\n";
    cout << "\t\t\t" << "-------------" << "\n";
    cout << "\t\t\t" << board[2][0] << "  |  " << board[2][1] << "  |  " << board[2][2] << "\n\n\n";
}

bool rowCrossed(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[i][0] == board[i][1] &&
            board[i][1] == board[i][2] &&
            board[i][0] != ' ')
            return (true);
    }
    return(false);
}

bool columnCrossed(char board[][SIDE])// A function that returns true if any of the column is crossed with the same player's move
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[0][i] == board[1][i] &&
            board[1][i] == board[2][i] &&
            board[0][i] != ' ')
            return (true);
    }
    return(false);
}

bool diagonalCrossed(char board[][SIDE])// A function that returns true if any of the diagonal is crossed with the same player's move
{
    if (board[0][0] == board[1][1] &&
        board[1][1] == board[2][2] &&
        board[0][0] != ' ')
        return(true);

    if (board[0][2] == board[1][1] &&
        board[1][1] == board[2][0] &&
        board[0][2] != ' ')
        return(true);

    return(false);
}

bool gameOver(char board[][SIDE])
{
    return(rowCrossed(board) || columnCrossed(board) || diagonalCrossed(board));
}

void declareWinner(int whoseTurn)// A function to declare the winner of the game
{
    if (whoseTurn == COMPUTER)
        cout << "COMPUTER has won\n";
    else
        cout << "HUMAN has won\n";
}

int minimax(char board[][SIDE], int depth, bool isAI)
{
    int score = 0;
    int bestScore = 0;
    if (gameOver(board) == true)
    {
        if (isAI == true)
            return -1;
        if (isAI == false)
            return +1;
    }
    else
    {
        if (depth < 9)
        {
            if (isAI == true)
            {
                bestScore = -999;
                for (int i = 0; i < SIDE; i++)
                {
                    for (int j = 0; j < SIDE; j++)
                    {
                        if (board[i][j] == ' ')
                        {
                            board[i][j] = COMPUTERMOVE;
                            score = minimax(board, depth + 1, false);
                            board[i][j] = ' ';
                            if (score > bestScore)
                            {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
            else
            {
                bestScore = 999;
                for (int i = 0; i < SIDE; i++)
                {
                    for (int j = 0; j < SIDE; j++)
                    {
                        if (board[i][j] == ' ')
                        {
                            board[i][j] = HUMANMOVE;
                            score = minimax(board, depth + 1, true);
                            board[i][j] = ' ';
                            if (score < bestScore)
                            {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
        }
        else
        {
            return 0;
        }
    }
}

int bestMove(char board[][SIDE], int moveIndex)// Function to calculate best move
{
    int x = -1, y = -1;
    int score = 0, bestScore = -999;
    for (int i = 0; i < SIDE; i++)
    {
        for (int j = 0; j < SIDE; j++)
        {
            if (board[i][j] == ' ')
            {
                board[i][j] = COMPUTERMOVE;
                score = minimax(board, moveIndex + 1, false);
                board[i][j] = ' ';
                if (score > bestScore)
                {
                    bestScore = score;
                    x = i;
                    y = j;
                }
            }
        }
    }
    return x * 3 + y;
}

void playTicTacToe(int whoseTurn)
{
    node* ptr = list1.head;
    char board[SIDE][SIDE] = { '0' };
    for (int j = 0; j < 3; j++)
    {
        for (int i = 0; i < 3; i++)
        {
            board[j][i] = ptr->data;
            ptr = ptr->next;
        }
    }

    int moveIndex = 0, x = 0, y = 0;
    showInstructions();

    // Keep playing till the game is over or it is a draw
    while (gameOver(board) == false && moveIndex != SIDE * SIDE)
    {
        float n;
        if (whoseTurn == COMPUTER)
        {
            n = bestMove(board, moveIndex);
            x = int(n) / SIDE;
            y = int(n) % SIDE;
            board[x][y] = COMPUTERMOVE;
            cout << "COMPUTER has put a " << COMPUTERMOVE << " in cell " << n + 1 << "\n\n";
            showBoard(board);
            moveIndex++;
            whoseTurn = HUMAN;
        }

        else if (whoseTurn == HUMAN)
        {
            printf("You can insert in the following positions : ");
            for (int i = 0; i < SIDE; i++)
                for (int j = 0; j < SIDE; j++)
                    if (board[i][j] == ' ')
                        cout << (i * 3 + j) + 1;
            cout << "\n\nEnter the position = ";
            istart = chrono::high_resolution_clock::now();
            state:
            cin >> n;
            if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto state;
    }
    else
    {
        if (n < 0)
        {
            cout << "please enter a positive number " << endl;
            goto state;
        }
        if (ceil(n) != n)
        {
            cout << "please enter a whole number " << endl;
            goto state;
        }
    }
            iEnd = chrono::high_resolution_clock::now();
            inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();            n--;
            x = int(n) / SIDE;
            y = int(n) % SIDE;
            if (board[x][y] == ' ' && n < 9 && n >= 0)
            {
                board[x][y] = HUMANMOVE;
                cout << "\nHUMAN has put a " << HUMANMOVE << " in cell " << n + 1 << "\n\n";
                showBoard(board);
                moveIndex++;
                whoseTurn = COMPUTER;
            }
            else if (board[x][y] != ' ' && n < 9 && n >= 0)
            {
                cout << "\nPosition is occupied, select any one place from the available places\n\n";
            }
            else if (n < 0 || n>8)
            {
                cout << "Invalid position\n";
            }
        }
    }

    // If the game has drawn
    if (gameOver(board) == false && moveIndex == SIDE * SIDE)
        cout << "It's a draw\n";
    else
    {
        // Toggling the user to declare the actual winner
        if (whoseTurn == COMPUTER)
            whoseTurn = HUMAN;
        else if (whoseTurn == HUMAN)
            whoseTurn = COMPUTER;

        declareWinner(whoseTurn);
    }
}


int main()
{
    start = chrono::high_resolution_clock::now();
    double selectedmode, type;

    cout << "Hello! Welcome to TicTacToe Game! \n";
statezero:
    cout << "Select 1 for Single Or 2 for Multi-Player: ";

    istart = chrono::high_resolution_clock::now();
    cin >> selectedmode;
    iEnd = chrono::high_resolution_clock::now();
    inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
    if (cin.fail())
    {
        cout << "please enter a Number not a character" << endl;
        cin.clear();
        cin.ignore(256, '\n');
        goto statezero;
    }
    else
    {
        if (selectedmode < 0)
        {
            cout << "please enter a positive number " << endl;
            goto statezero;
        }
        if (ceil(selectedmode) != selectedmode)
        {
            cout << "please enter a whole number " << endl;
            goto statezero;
        }
    }
    if (selectedmode == MULTI)
    {
        list1.push1();


        list1.display_board();
        while (gameover())
        {
            list1.multiplayer();
            gameover();
        }
        if (iturn == 1 && draw == false)
        {
            cout << "\n" << "Congratulations! Player with 'O' has won the game";
        }
        else if (iturn == 2 && draw == false)
        {
            cout << "\n" << "Congratulations! Player with 'X' has won the game";
        }
        else if (!gameover())
            cout << "\n" << "GAME DRAW ";
    }
    else if (selectedmode == SINGLE)
    {


    state1:

        istart = chrono::high_resolution_clock::now();
    stateone:
        cout << "Select The Level Of Difficulty 1 for Easy or 2 for Hard: ";
        cin >> type;
        if (cin.fail())
        {
            cout << "please enter a Number not a character" << endl;
            cin.clear();
            cin.ignore(256, '\n');
            goto stateone;
        }
        else
        {
            if (type < 0)
            {
                cout << "please enter a positive number " << endl;
                goto stateone;
            }
            if (ceil(type) != type)
            {
                cout << "please enter a whole number " << endl;
                goto stateone;
            }
        }
        iEnd = chrono::high_resolution_clock::now();
        inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
        list1.push1();

        if (type == EASY)
        {
            list1.display_board();

            while (gameover())
            {
                list1.singleplayer_easy();
                gameover();
            }
            if (iturn == 1 && draw == false)
            {
                cout << "\n" << "Computer won, Good Luck Next Time!";
            }
            else if (iturn == 2 && draw == false)
            {
                cout << "\n" << "Congratulations! You won!";
            }
            else
                cout << "GAME DRAW";
        }
        else if (type == HARD)
        {
            list1.push2();

            char cont = 'y';
            do {
                char choice;
                label:
                cout << "Do you want to start first?(y/n) : ";
                istart = chrono::high_resolution_clock::now();
                cin >> choice;
                iEnd = chrono::high_resolution_clock::now();
                inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
                if (choice == 'n')
                    playTicTacToe(COMPUTER);
                else if (choice == 'y')
                    playTicTacToe(HUMAN);
                else
                {
                    cout << "Invalid choice enter y or n\n";
                    goto label;
                }
                lable:
                cout << "\nDo you want to quit(y/n) : ";
                istart = chrono::high_resolution_clock::now();
                cin >> cont;
                if (cont != 'y' && cont != 'n')
                {
                    cout << "Invalid choice enter y or n\n";
                    goto lable;
                }
                iEnd = chrono::high_resolution_clock::now();
                inp_time = inp_time + chrono::duration_cast<chrono::nanoseconds>(iEnd - istart).count();
            } while (cont == 'n');
        }
        else
        {
            cout << "Select 1 Or 2 Please  \n";
            goto state1;
        }

    }
    else
    {
        cout << "Select 1 Or 2 Please  \n";
        goto statezero;
    }
    End = chrono::high_resolution_clock::now();
    time_taken = chrono::duration_cast<chrono::nanoseconds>(End - start).count();
    time_taken = time_taken - inp_time;
    time_taken *= 1e-9;

    cout << "\nTime taken by program is : " << fixed << time_taken << setprecision(9);
    cout << " sec" << endl;

    return 0;
}
